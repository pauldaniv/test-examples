import java.security.InvalidParameterException


buildscript {
  ext.kotlin_version = '1.3.30'

  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "com.adarshr:gradle-test-logger-plugin:1.6.0"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

  }
}


subprojects {


  apply plugin: "com.adarshr.test-logger"
  apply plugin: 'kotlin'

  apply plugin: 'idea'
  apply plugin: 'groovy'
  apply plugin: 'java'


  idea {
    module {
      outputDir file('build/classes/main/java')
      testOutputDir file('build/classes/test/java')
//      inheritOutputDirs = true

      [".idea", "build", "gradle", "classes", "logs", "tmp"].each {
        excludeDirs << file("$it")
      }
    }
  }

  testlogger {
    theme 'mocha'
    showExceptions true
    slowThreshold 2000
    showSummary true
    showPassed true
    showSkipped true
    showFailed true
    showStandardStreams false
    showPassedStandardStreams true
    showSkippedStandardStreams true
    showFailedStandardStreams true
  }

  sourceSets {
    main {
      java.outputDir = new File(buildDir, "classes/main/java")
      groovy.outputDir = new File(buildDir, "classes/main/java")
    }
    test {
      java.outputDir = new File(buildDir, "classes/test/java")
      groovy.outputDir = new File(buildDir, "classes/test/java")

    }

  }

  ext.logsRoot = "logs"

  clean.doFirst {
    delete "${rootDir}/${logsRoot}"
  }
  afterEvaluate {
    repositories {
      jcenter()
    }


    java {
      sourceCompatibility = JavaVersion.VERSION_1_8
      targetCompatibility = JavaVersion.VERSION_1_8
    }
    clean.doFirst {
      delete "${logsRoot}"
    }

    ext {
      lombokVersion = '1.18.4'
    }


    dependencies {
      compile "org.projectlombok:lombok:${lombokVersion}"
      annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
      testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
      implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    }

    test {
      ext.doThrow = { String message, String data ->
        throw new GradleScriptException(message, new InvalidParameterException(data))
      }

      ext.resolveClassName = { String separator, String testType, String rootClass, String testTypeKey ->
        def theTestType
        def path = testType.split(separator).each {
          !it.empty ? it : ext.doThrow('Invalid test type', testType)
        }.collect { it.capitalize() }
        println path
        if (path.size() > 3) {
          ext.doThrow("Invalid value: '$testType' for property: $testTypeKey", testType)
        } else if (path.size() == 3) {
          theTestType = "${path[1]}\$${path[2]}"
          if (!path[0].equalsIgnoreCase(rootClass)) {
            ext.doThrow("Invalid root test class type", path[0])
          }
          return "$rootClass\$${theTestType}"
        } else {
          println path
          if (path[0].equalsIgnoreCase(rootClass)) {
            return "$rootClass\$${path[1]}"
          } else {
            return "$rootClass\$${path[0]}\$${path[1]}"
          }
        }
      }

      def testTypeKeys = ['test.type',
                          'testType',
                          'TestType',
                          'Test.Type',
                          'testtype',
                          'testProfile',
                          'TestProfile',
                          'test.profile',
                          'testprofile']

      def rootClass = 'TestGroup'
      def theTestType = rootClass

      def testTypeKeyHolder = testTypeKeys.stream().filter { project.hasProperty(it) }.findFirst()
      if (testTypeKeyHolder.present) {
        def testTypeKey = testTypeKeyHolder.get()
        String testType = project.property(testTypeKey)
        def dollarSeparator = testType.contains('$')
        def dotSeparator = testType.contains('.')
        if (!dollarSeparator && !dotSeparator) {
          if (testType != 'all') {
            theTestType = "$rootClass\$${testType.capitalize()}"
          }
        } else if (dotSeparator) {
          theTestType = ext.resolveClassName('\\.', testType, rootClass, testTypeKey)
        } else if (dollarSeparator) {
          theTestType = ext.resolveClassName('\\$', testType, rootClass, testTypeKey)
        } else {
          ext.doThrow('Invalid test type', testType)
        }
      }

      useJUnit {
        if (theTestType != rootClass)
          includeCategories "com.paul.common.test.groups.$theTestType"
      }
    }

// the legacy bellow it's a try to create custom jdk build using jlink, might be usefully at some day
//        ext {
//            mainClass = 'org.springframework.boot.loader.JarLauncher'
//            launcher = 'run'
//        }

//        jar {
//            inputs.property("moduleName", moduleName)
//            manifest {
//                attributes('Automatic-Module-Name': moduleName)
//            }
//        }

//        compileJava {
//            doFirst {
//                options.compilerArgs = [
//                        '--module-path', classpath.asPath
//                ]
//                classpath = files()
//            }
//        }

//        def java_home = System.getenv('JAVA_HOME')
//        task link(type: Exec) {
//            dependsOn 'clean'
//            dependsOn 'jar'
//
//            workingDir 'build'
//            inputs.property("moduleName", moduleName)
//
//            commandLine "${java_home}/bin/jlink", '--module-path', "../../library/build/libs:libs:${java_home}/jmods:/home/paul/.m2/repository/org/springframework/boot/spring-boot/2.1.2.RELEASE:/home/paul/.m2/repository/org/springframework/spring-core/5.1.4.RELEASE:/home/paul/.m2/repository/org/springframework/spring-beans/5.1.4.RELEASE:/home/paul/.m2/repository/org/springframework/spring-context/5.1.4.RELEASE:/home/paul/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/2.1.2.RELEASE",
//                    '--add-modules', "com.paul.library", '--launcher', "${launcher}=${mainClass}", '--output', 'dist', '--strip-debug',
//                    '--compress', '2', '--no-header-files', '--no-man-pages'
//        }
  }
}

ext {
  apacheSparkVersion = '2.3.0'
  apacheSparkScalaVersion = '2.11'
}
